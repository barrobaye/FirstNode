datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
    seed = "./prisma/seed.ts"
}



model Article {
  id            Int           @id @default(autoincrement())
  libelle       String
  prix          Float
  quantiteStock Int
  detail        Detail[]
  categorie     Categorie?     @relation(fields: [categoriId], references: [id])
  categoriId    Int?          
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  @@index([categoriId], map: "Article_categoriId_idx_unique")
}

model Categorie {
  id          Int             @id @default(autoincrement())
  libelle    String           @unique
  Article    Article[]
}

model Detail {
  dette         Dette    @relation(fields: [detteId], references: [id])
  detteId       Int
  article    Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId     Int
  prixVente     Float
  qteVente      Float
  createdAt     DateTime @default(now())
  @@id([detteId, articleId])
}

model Dette {
  id               Int             @id @default(autoincrement())
  clientId         Int
  client           Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  montant          Float
  status           Boolean         @default(false)
  detail           Detail[]
  paiements        Paiement[]
  demande          Demande?        @relation("DetteDemande") // Relation un-à-un, optionnelle
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  @@index([clientId], map: "Dette_clientId_idx_unique")
}

model Demande {
  id               Int             @id @default(autoincrement())
  detteId          Int?            @unique // Ajout de @unique pour garantir l'unicité de la relation
  dette            Dette?          @relation(fields: [detteId], references: [id], name: "DetteDemande") // Relation un-à-un
  etatDemande      EtaDemande      @default(EN_ATTENTE)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum EtaDemande {
  ACCEPTER
  NON_ACCEPTER
  EN_ATTENTE
}


model Paiement {  
  id              Int         @id @default(autoincrement()) 
  montantVerser   Float       
  montantRest     Float
  date            DateTime     @default(now())
  detteId         Int
  dette           Dette       @relation(fields: [detteId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  @@index([detteId], map: "Paiement_detteId_idx_unique")
}

enum Role {
  CLIENT
  ADMIN
  BOUTIQUIER
}

model Client {
  id          Int      @id @default(autoincrement())
  nom         String
  prenom      String
  telephone   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    
  dettes      Dette[]
}

model User {
  id        Int             @id @default(autoincrement())
  email     String          @unique
  password  String
  role      Role            @default(CLIENT) 
  telephone String?         @unique
  clientId  Int?            @unique 
  client    Client?         @relation(fields: [clientId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}
